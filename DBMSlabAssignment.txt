#### (Exercise: retrieve the records from the table) EMPLOYEES (Employee_Id, First_Name, Last_Name,
Email, Phone_Number, Hire_Date, Job_Id, Salary, Commission_Pct, Manager_Id, Department_Id)

1. create an employee’s table with the following fields: (Emp_id, First_name, Last_name,
Phone_No,Hire_date,Job_id,Emp_Salary,Comission_Pct,manager _id,Department_id)

Answer => CREATE TABLE Employees (
    Emp_id INT PRIMARY KEY,
    First_name VARCHAR(50),
    Last_name VARCHAR(50),
    Phone_No VARCHAR(15),
    Hire_date DATE,
    Job_id VARCHAR(10),
    Emp_Salary DECIMAL(10, 2),
    Commission_Pct DECIMAL(5, 2),
    Manager_id INT,
    Department_id INT
);


2. Insert five records into the table employees
Answer => INSERT INTO Employees (Emp_id, First_name, Last_name, Phone_No, Hire_date, Job_id, Emp_Salary, Commission_Pct, Manager_id, Department_id)
VALUES 
(1, 'John', 'Doe', '555-1234', '2022-01-15', 'IT_PROG', 6000.00, 0.10, 101, 60),
(2, 'Jane', 'Smith', '555-5678', '2021-07-23', 'HR_MAN', 5500.00, 0.15, 102, 70),
(3, 'Bob', 'Austin', '555-8765', '2023-03-12', 'SA_REP', 4800.00, 0.12, 103, 80),
(4, 'Alice', 'Johnson', '555-4321', '2022-09-30', 'IT_PROG', 5200.00, 0.10, 101, 60),
(5, 'Tom', 'Brown', '555-6789', '2021-11-05', 'AD_VP', 7000.00, 0.20, 104, 70);


3. Display the table Employees

Answer => SELECT * FROM Employees;

4. Find out the employee id, names, salaries of all the employees

Answer => SELECT Emp_id, First_name, Last_name, Emp_Salary FROM Employees;


5. Find the names of the employees who have a salary greater than or equal to 4800

Answer => SELECT First_name, Last_name FROM Employees WHERE Emp_Salary >= 4800;


6. List out the employees whose last name is ‘AUSTIN’

Answer => SELECT * FROM Employees WHERE Last_name = 'AUSTIN';

7. Find the names of the employees who works in departments 60,70 and 80

Answer => SELECT First_name, Last_name FROM Employees WHERE Department_id IN (60, 70, 80);


8. Display the unique Manager_Id from employees table

Answer => SELECT DISTINCT Manager_id FROM Employees;



######(Exercise: update the records in the table) Create Client_master with the following fields (ClientNO,
Name, Address, City, State, bal_due)
1. create a client master table with attributes
Answer =>CREATE TABLE Client_Master (
    ClientNO VARCHAR(10) PRIMARY KEY,
    Name VARCHAR(50),
    Address VARCHAR(100),
    City VARCHAR(50),
    State VARCHAR(50),
    bal_due DECIMAL(10, 2)
);


2. insert five records into the Client_Master
Answer =>INSERT INTO Client_Master (ClientNO, Name, Address, City, State, bal_due)
VALUES
('C101', 'Alice Smith', '123 Main St', 'Los Angeles', 'CA', 4500.00),
('C102', 'Bob Johnson', '456 Elm St', 'New York', 'NY', 6000.00),
('C103', 'Charlie Brown', '789 Pine St', 'Chicago', 'IL', 3000.00),
('C104', 'David Wilson', '101 Maple St', 'Houston', 'TX', 7000.00),
('C123', 'Eva Adams', '202 Oak St', 'Phoenix', 'AZ', 4800.00);

3. Display Client Master Table
Answer =>SELECT * FROM Client_Master;

4. Find the name of Clients whose balance_due >5000
Answer =>SELECT Name FROM Client_Master WHERE bal_due > 5000;

5. Change the bal_due of ClientNO “C123” to Rs. 5100
Answer =>UPDATE Client_Master
SET bal_due = 5100.00
WHERE ClientNO = 'C123';

6. Change the name of Client_master to Client12
Answer =>ALTER TABLE Client_Master RENAME TO Client12;

7. Display the bal_due heading as “BALANCE” Client master table
Answer =>SELECT ClientNO, Name, Address, City, State, bal_due AS BALANCE FROM Client_Master;


####Commands of Rollback and Commit : Create Teacher table with the following fields (Name, DeptNo,
Date of joining, DeptName, Location, Salary)
1. Create Teacher table with the following fields (Id,Name, DeptNo, Date of joining,
DeptName, Location, Salary)
Answer => CREATE TABLE Teacher (
    Id INT PRIMARY KEY,
    Name VARCHAR(50),
    DeptNo INT,
    Date_of_joining DATE,
    DeptName VARCHAR(50),
    Location VARCHAR(50),
    Salary DECIMAL(10, 2)
);


2. Insert five records
Answer =>INSERT INTO Teacher (Id, Name, DeptNo, Date_of_joining, DeptName, Location, Salary)
VALUES
(1, 'Alice Johnson', 101, '2020-01-15', 'Mathematics', 'New York', 5000.00),
(2, 'Bob Smith', 102, '2019-07-23', 'Physics', 'Los Angeles', 5500.00),
(3, 'Charlie Brown', 103, '2021-03-12', 'Mathematics', 'Chicago', 4800.00),
(4, 'David Wilson', 104, '2018-09-30', 'Commerce', 'Houston', 5200.00),
(5, 'Eva Adams', 105, '2022-11-05', 'Commerce', 'Phoenix', 4700.00);


3. Give Increment of 25% salary for Mathematics Department.
Answer =>UPDATE Teacher
SET Salary = Salary * 1.25
WHERE DeptName = 'Mathematics';


4. Perform Rollback command
Answer =>
START TRANSACTION;
UPDATE Teacher
SET Salary = Salary * 1.25
WHERE DeptName = 'Mathematics';
ROLLBACK;


5. Give Increment of 15% salary for Commerce Department
Answer =>
START TRANSACTION;
UPDATE Teacher
SET Salary = Salary * 1.15
WHERE DeptName = 'Commerce';
COMMIT;


6. Perform commit command
Answer =>COMMIT;

####(Exercise on the group by and order by clauses) Create Sales table with the following fields (Sales
No, Salesname, Branch, Salesamount, DOB)
1. Create a Sales Table with the following fields
(Sales_No,Sales_Name,Branch,Sales_Amount,DOB)
Answer => CREATE TABLE Sales (
    Sales_No INT PRIMARY KEY,
    Sales_Name VARCHAR(50),
    Branch VARCHAR(50),
    Sales_Amount DECIMAL(10, 2),
    DOB DATE
);


2. Insert five records
Answer => INSERT INTO Sales (Sales_No, Sales_Name, Branch, Sales_Amount, DOB)
VALUES
(1, 'Alice Johnson', 'New York', 1500.00, '1990-12-21'),
(2, 'Bob Smith', 'Los Angeles', 2000.00, '1985-06-15'),
(3, 'Charlie Brown', 'Chicago', 1800.00, '1975-12-05'),
(4, 'David Wilson', 'Houston', 2200.00, '1992-03-12'),
(5, 'Eva Adams', 'Phoenix', 1700.00, '1980-12-30');


3. Calculate total salesamount in each branch
Answer => SELECT Branch, SUM(Sales_Amount) AS Total_Sales
FROM Sales
GROUP BY Branch;


4. Calculate average salesamount in each branch
Answer => SELECT Branch, AVG(Sales_Amount) AS Average_Sales
FROM Sales
GROUP BY Branch;


5. Display all the salesmen, DOB who are born in the month of December as day in
character format i.e. 21-Dec-09
Answer => SELECT Sales_Name, TO_CHAR(DOB, 'DD-Mon-YY') AS DOB
FROM Sales
WHERE EXTRACT(MONTH FROM DOB) = 12;


6. Display the name and DOB of salesman in alphabetical order of the month.
Answer => SELECT Sales_Name, TO_CHAR(DOB, 'DD-Mon-YY') AS DOB
FROM Sales
ORDER BY TO_CHAR(DOB, 'Mon');


#####Create an Emp table with the following fields: (EmpNo, EmpName, Job,Basic, DA, HRA,PF, GrossPay,
NetPay)
1. create an employee table with the following fields: (Emp_No,Emp_ Name, Designation,
basic, DA, HRA, PF, Gross pay, Net pay)
Answer => CREATE TABLE Emp (
    Emp_No INT PRIMARY KEY,
    Emp_Name VARCHAR(50),
    Designation VARCHAR(50),
    Basic DECIMAL(10, 2),
    DA DECIMAL(10, 2),
    HRA DECIMAL(10, 2),
    PF DECIMAL(10, 2),
    Gross_Pay DECIMAL(10, 2),
    Net_Pay DECIMAL(10, 2)
);


2. Insert Five Records and calculate GrossPay and NetPay.
Answer => INSERT INTO Emp (Emp_No, Emp_Name, Designation, Basic, DA, HRA, PF, Gross_Pay, Net_Pay)
VALUES
(1, 'Alice Johnson', 'Manager', 10000.00, 2000.00, 1500.00, 1200.00, 13500.00, 12300.00),
(2, 'Bob Smith', 'Developer', 8000.00, 1600.00, 1200.00, 960.00, 10800.00, 9840.00),
(3, 'Charlie Brown', 'Tester', 7000.00, 1400.00, 1050.00, 840.00, 9450.00, 8610.00),
(4, 'David Wilson', 'Developer', 8500.00, 1700.00, 1275.00, 1020.00, 11475.00, 10455.00),
(5, 'Eva Adams', 'Manager', 12000.00, 2400.00, 1800.00, 1440.00, 16200.00, 14760.00);



3. Adding column to table and Updating Attributes DA
Answer => UPDATE Emp SET DA = Basic * 0.2;


4. Adding column to table and Updating Attributes HRA
Answer => UPDATE Emp SET HRA = Basic * 0.15;


5. Adding column to table and Updating Attributes PF
Answer => UPDATE Emp SET PF = Basic * 0.12;


6. Adding column to table and Updating Attributes Gross Pay
Answer => UPDATE Emp SET Gross_Pay = Basic + DA + HRA;


7. Adding column to table and Updating Attributes Net Pay
Answer => UPDATE Emp SET Net_Pay = Gross_Pay - PF;


8. Display the employee table
Answer => SELECT * FROM Emp;


9. Display the employees whose Basic is lowest in each department.
Answer => SELECT * 
FROM Emp e
WHERE Basic = (
    SELECT MIN(Basic)
    FROM Emp
    WHERE Designation = e.Designation
);


10. If NetPay is less than Rs. 10,000 add Rs. 1200 as special allowance
Answer => UPDATE Emp
SET Net_Pay = Net_Pay + 1200
WHERE Net_Pay < 10000;


11. Display the employees whose GrossPay lies between 10,000 & 20,000
Answer => SELECT * FROM Emp WHERE Gross_Pay BETWEEN 10000 AND 20000;


12. Display all the employees who earn maximum salary.
Answer => SELECT * 
FROM Emp
WHERE Gross_Pay = (SELECT MAX(Gross_Pay) FROM Emp);






##### Employee Database an Enterprise wishes to maintain a database to automate its operations.
Enterprise is divided into certain departments and each department consists of employees. The
following two tables describes the automation schemas Dept (deptno, dname, loc) Emp (empno,
ename, job, mgr, hiredate, sal, comm, deptno)
1. Create Dept table: Dept (deptno, dname, loc)
Answer => CREATE TABLE Dept (
    deptno INT PRIMARY KEY,
    dname VARCHAR(50),
    loc VARCHAR(50)
);


2. Create Dept table: Emp (empno, ename, job, mgr, hiredate, sal, comm, deptno)
Answer => CREATE TABLE Emp (
    empno INT PRIMARY KEY,
    ename VARCHAR(50),
    job VARCHAR(50),
    mgr INT,
    hiredate DATE,
    sal DECIMAL(10, 2),
    comm DECIMAL(10, 2),
    deptno INT,
    FOREIGN KEY (deptno) REFERENCES Dept(deptno),
    FOREIGN KEY (mgr) REFERENCES Emp(empno)
);


3. Insert data int Dept and Emp tables
Answer => -- Insert data into Dept table
INSERT INTO Dept (deptno, dname, loc)
VALUES
(10, 'Accounting', 'New York'),
(20, 'Research', 'Dallas'),
(30, 'Sales', 'Chicago'),
(40, 'Operations', 'Boston');

-- Insert data into Emp table
INSERT INTO Emp (empno, ename, job, mgr, hiredate, sal, comm, deptno)
VALUES
(1, 'John Smith', 'Manager', NULL, '1985-06-01', 8000.00, 500.00, 10),
(2, 'Jane Doe', 'Clerk', 1, '1990-07-15', 3000.00, 200.00, 10),
(3, 'Alice Brown', 'Analyst', 1, '1992-03-12', 5000.00, 300.00, 20),
(4, 'Bob Johnson', 'Salesman', 1, '1985-09-30', 4000.00, 400.00, 30),
(5, 'David Wilson', 'Clerk', 3, '1995-11-05', 3500.00, 150.00, 20);


4. Update the employee salary by 15%, whose experience is greater than 30 years
Answer => UPDATE Emp
SET sal = sal * 1.15
WHERE hiredate <= (CURRENT_DATE - INTERVAL '30' YEAR);


5. Delete the employees, who completed 30 years of service.
Answer => DELETE FROM Emp
WHERE hiredate <= (CURRENT_DATE - INTERVAL '30' YEAR);


6. Display the manager who is having maximum number of employees working under
him?
Answer => SELECT mgr, COUNT(*) AS num_employees
FROM Emp
GROUP BY mgr
ORDER BY num_employees DESC
LIMIT 1;


7. Create a view, which contain employee names and their manager
Answer => CREATE VIEW Emp_Manager_View AS
SELECT e.ename AS Employee_Name, m.ename AS Manager_Name
FROM Emp e
LEFT JOIN Emp m ON e.mgr = m.empno;




##### Using Employee Database above perform the following queries
1. Determine the names of employee, who earn more than their managers.
Answer => SELECT e.ename AS Employee_Name
FROM Emp e
JOIN Emp m ON e.mgr = m.empno
WHERE e.sal > m.sal;


2. Determine the names of employees, who take highest salary in their departments.
Answer => SELECT e.ename AS Employee_Name, e.deptno
FROM Emp e
JOIN (
    SELECT deptno, MAX(sal) AS max_sal
    FROM Emp
    GROUP BY deptno
) d ON e.deptno = d.deptno AND e.sal = d.max_sal;


3. Determine the employees, who are located at the same place.
Answer => SELECT e1.ename AS Employee1_Name, e2.ename AS Employee2_Name, d.loc
FROM Emp e1
JOIN Emp e2 ON e1.deptno = e2.deptno AND e1.empno <> e2.empno
JOIN Dept d ON e1.deptno = d.deptno;


4. Determine the employees, whose total salary is like the minimum Salary of any
department.
Answer => WITH MinDeptSal AS (
    SELECT MIN(sal + IFNULL(comm, 0)) AS min_total_sal
    FROM Emp
)
SELECT e.ename AS Employee_Name
FROM Emp e
JOIN MinDeptSal mds ON (e.sal + IFNULL(e.comm, 0)) = mds.min_total_sal;


5.Determine the department which does not contain any employees.
Answer => SELECT d.dname AS Department_Name
FROM Dept d
LEFT JOIN Emp e ON d.deptno = e.deptno
WHERE e.empno IS NULL;



###### Using the tables “DEPARTMENTS” and “EMPLOYEES” above perform the following queries
1. Display the employee details, departments that the departments are same in both the
emp and dept.
Answer => SELECT e.*
FROM Emp e
JOIN Dept d ON e.deptno = d.deptno;

2. Display the employee name and Department name by implementing a left outer join.
Answer => SELECT e.ename AS Employee_Name, d.dname AS Department_Name
FROM Emp e
LEFT JOIN Dept d ON e.deptno = d.deptno;


3. Display the employee name and Department name by implementing a right outer join.
Answer => SELECT e.ename AS Employee_Name, d.dname AS Department_Name
FROM Emp e
RIGHT JOIN Dept d ON e.deptno = d.deptno;

4. Display the details of those who draw the salary greater than the average salary.
Answer => WITH AvgSal AS (
    SELECT AVG(sal) AS avg_sal
    FROM Emp
)
SELECT e.*
FROM Emp e
JOIN AvgSal a ON e.sal > a.avg_sal;
